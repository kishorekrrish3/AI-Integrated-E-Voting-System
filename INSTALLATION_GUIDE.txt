
╔══════════════════════════════════════════════════════════════════════════════╗
║                   🗳️  AI-INTEGRATED E-VOTING SYSTEM v4.0.0                  ║
║                        INSTALLATION & EXECUTION GUIDE                        ║
╚══════════════════════════════════════════════════════════════════════════════╝

📋 TABLE OF CONTENTS
═══════════════════════════════════════════════════════════════════════════════
1. System Requirements
2. Installation Steps
3. Running the Application
4. First-Time Setup
5. Admin Access
6. Testing the System
7. Troubleshooting
8. File Structure
9. DSA Components
10. Support

───────────────────────────────────────────────────────────────────────────────
1. SYSTEM REQUIREMENTS
───────────────────────────────────────────────────────────────────────────────

✓ Python 3.8 or higher
✓ pip (Python package manager)
✓ 50 MB free disk space
✓ Modern web browser (Chrome, Firefox, Safari, Edge)
✓ Internet connection (for initial setup only)

Operating Systems Supported:
• Windows 10/11
• macOS 10.14+
• Linux (Ubuntu 18.04+, Debian, etc.)

───────────────────────────────────────────────────────────────────────────────
2. INSTALLATION STEPS
───────────────────────────────────────────────────────────────────────────────

STEP 1: Verify Python Installation
───────────────────────────────────
Open terminal/command prompt and run:

    python --version

    OR

    python3 --version

Expected output: Python 3.8.x or higher

If Python is not installed, download from: https://www.python.org/downloads/


STEP 2: Navigate to Project Directory
──────────────────────────────────────
    cd path/to/e_voting_system

On Windows:
    cd C:\Users\YourName\Downloads\e_voting_system

On macOS/Linux:
    cd ~/Downloads/e_voting_system


STEP 3: Install Dependencies
─────────────────────────────
    pip install -r requirements.txt

    OR on some systems:

    pip3 install -r requirements.txt

This will install:
• streamlit==1.28.0
• plotly==5.17.0
• pandas==2.1.0

Installation takes approximately 2-3 minutes.

───────────────────────────────────────────────────────────────────────────────
3. RUNNING THE APPLICATION
───────────────────────────────────────────────────────────────────────────────

COMMAND:
────────
    streamlit run app.py

The application will automatically:
1. Initialize the data structures
2. Create necessary data files
3. Open your default browser
4. Navigate to http://localhost:8501

EXPECTED OUTPUT:
────────────────
  You can now view your Streamlit app in your browser.

  Local URL: http://localhost:8501
  Network URL: http://192.168.x.x:8501

STOPPING THE APPLICATION:
──────────────────────────
Press Ctrl+C in the terminal to stop the server.

───────────────────────────────────────────────────────────────────────────────
4. FIRST-TIME SETUP
───────────────────────────────────────────────────────────────────────────────

When you first run the application:

✓ Data directory will be auto-created
✓ JSON files will be initialized
✓ Hash tables will be set up
✓ Trie will be initialized
✓ Default metadata will be created

Initial file structure:
e_voting_system/data/
├── voters.json       (empty initially)
├── candidates.json   (empty initially)
├── votes.json        (empty initially)
└── metadata.json     (system info)

───────────────────────────────────────────────────────────────────────────────
5. ADMIN ACCESS
───────────────────────────────────────────────────────────────────────────────

DEFAULT CREDENTIALS:
────────────────────
Password: admin123

HOW TO ACCESS:
──────────────
1. Click "🔐 Admin Panel" in the sidebar
2. Enter password: admin123
3. Click "Login"

ADMIN CAPABILITIES:
───────────────────
✓ View system statistics
✓ Create and restore backups
✓ Export data to CSV
✓ Manual save operations
✓ System health monitoring
✓ Cache management

CHANGING ADMIN PASSWORD:
────────────────────────
Edit modules/admin.py:

    ADMIN_PASSWORD = "your_new_password"

Then restart the application.

───────────────────────────────────────────────────────────────────────────────
6. TESTING THE SYSTEM
───────────────────────────────────────────────────────────────────────────────

RECOMMENDED TEST FLOW:
──────────────────────

1. REGISTER VOTERS
   • Navigate to "📝 Voter Registration"
   • Add 3-5 test voters
   • Save the generated Voter IDs

2. REGISTER CANDIDATES
   • Navigate to "🎯 Candidate Registration"
   • Add 3-4 test candidates
   • Note the candidate names

3. CAST VOTES
   • Navigate to "🗳️ Cast Vote"
   • Use saved Voter IDs
   • Select different candidates

4. VIEW RESULTS
   • Navigate to "📊 Results & Analytics"
   • Check leaderboard
   • View charts and metrics

5. EXPLORE DSA
   • Navigate to "🧮 DSA Dashboard"
   • Test Trie search
   • View complexity analysis

6. ADMIN OPERATIONS
   • Navigate to "🔐 Admin Panel"
   • Create a backup
   • Export data
   • View statistics

───────────────────────────────────────────────────────────────────────────────
7. TROUBLESHOOTING
───────────────────────────────────────────────────────────────────────────────

PROBLEM: "streamlit: command not found"
SOLUTION:
    • Verify installation: pip list | grep streamlit
    • Reinstall: pip install --upgrade streamlit
    • Use full path: python -m streamlit run app.py

PROBLEM: "ModuleNotFoundError"
SOLUTION:
    • Reinstall dependencies: pip install -r requirements.txt
    • Check Python version: python --version
    • Use virtual environment (recommended)

PROBLEM: Port 8501 already in use
SOLUTION:
    • Use different port: streamlit run app.py --server.port 8502
    • Kill existing process: lsof -ti:8501 | xargs kill -9 (Linux/Mac)

PROBLEM: Data not persisting
SOLUTION:
    • Check file permissions in data/ directory
    • Ensure write access: chmod 755 data/
    • Verify JSON files are not corrupted

PROBLEM: Browser doesn't open automatically
SOLUTION:
    • Manually navigate to: http://localhost:8501
    • Disable firewall temporarily
    • Try different browser

───────────────────────────────────────────────────────────────────────────────
8. FILE STRUCTURE
───────────────────────────────────────────────────────────────────────────────

e_voting_system/
│
├── app.py                        🚀 Main entry point (RUN THIS)
│
├── requirements.txt              📦 Dependencies
├── README.md                     📖 Documentation
│
├── core/                         🧮 Core algorithms
│   ├── data_structures.py        • HashTable, Trie, SegmentTree
│   ├── security.py               • Hashing, ID generation
│   ├── persistence.py            • File operations, backup
│   ├── utils.py                  • Helper functions
│   └── __init__.py
│
├── modules/                      📁 Functional modules
│   ├── registration.py           • Voter/Candidate registration
│   ├── voting.py                 • Vote casting
│   ├── results.py                • Analytics & visualizations
│   ├── dsa_dashboard.py          • DSA educational showcase
│   ├── admin.py                  • Admin controls
│   └── __init__.py
│
├── data/                         💾 Data storage (auto-created)
│   ├── voters.json
│   ├── candidates.json
│   ├── votes.json
│   ├── metadata.json
│   └── backups/                  (created on first backup)
│
└── assets/                       🎨 (reserved for future assets)

TOTAL: 12 Python files, 2,292 lines of code

───────────────────────────────────────────────────────────────────────────────
9. DSA COMPONENTS IMPLEMENTED
───────────────────────────────────────────────────────────────────────────────

┌─────────────────────┬──────────────────┬─────────────────┬──────────────┐
│ Data Structure      │ Time Complexity  │ Space           │ Usage        │
├─────────────────────┼──────────────────┼─────────────────┼──────────────┤
│ Hash Table          │ O(1) average     │ O(N)            │ Storage      │
│ Trie                │ O(L)             │ O(ALPHABET×L×N) │ Search       │
│ Set                 │ O(1) average     │ O(N)            │ Tracking     │
│ List + Sort         │ O(N log N)       │ O(N)            │ Ranking      │
│ Segment Tree        │ O(log N)         │ O(N)            │ Demo         │
└─────────────────────┴──────────────────┴─────────────────┴──────────────┘

All implementations are CUSTOM (hand-coded, not library-based).

───────────────────────────────────────────────────────────────────────────────
10. SUPPORT & ADDITIONAL INFO
───────────────────────────────────────────────────────────────────────────────

📚 Documentation:
   • README.md (comprehensive guide)
   • In-app help (every page has instructions)
   • DSA Dashboard (educational content)

🎓 Learning Resources:
   • Hash Tables: O(1) lookup magic
   • Trie: Prefix search efficiency
   • Sorting: O(N log N) ranking
   • Security: SHA-256 integrity

🔧 Customization:
   • Hash table sizes: modules/registration.py
   • Admin password: modules/admin.py
   • UI styling: app.py (CSS section)

💾 Data Backup:
   • Automatic JSON persistence
   • Manual backup via Admin Panel
   • gzip compressed backups
   • Restore from any backup point

═══════════════════════════════════════════════════════════════════════════════

🎉 YOU'RE READY TO GO!

Execute this command to start:

    streamlit run app.py

Then explore all features and learn about DSA in action!

═══════════════════════════════════════════════════════════════════════════════
Version 4.0.0 | Multi-File Architecture | DSA-Driven | Production Ready ✅
═══════════════════════════════════════════════════════════════════════════════
